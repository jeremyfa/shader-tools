#!/usr/bin/env node

const spawn = require('child_process').spawn;
const execSync = require('child_process').execSync;
const fs = require('fs');
const path = require('path');

const args = process.argv.slice(2);
function argumentFlag(argName) {
    const index = args.indexOf(`--${argName}`);
    if (index !== -1) {
        return true;
    }
    return false;
}

const forceRebuild = argumentFlag('force-rebuild');

function isLinuxArm64() {
    try {
        const arch = execSync('uname -m').toString().trim();
        return arch == 'aarch64';
    } catch (error) {
        console.error('Error detecting architecture:', error);
        return null;
    }
}

function getGitCommit(repoPath) {
    try {
        return execSync('git rev-parse HEAD', { cwd: repoPath }).toString().trim();
    } catch (error) {
        console.error('Error getting git commit:', error);
        return null;
    }
}

function deleteDirRecursive(dirPath) {
    if (fs.existsSync(dirPath)) {
        fs.readdirSync(dirPath).forEach((file) => {
            const curPath = path.join(dirPath, file);
            if (fs.lstatSync(curPath).isDirectory()) {
                deleteDirRecursive(curPath);
            } else {
                fs.unlinkSync(curPath);
            }
        });
        fs.rmdirSync(dirPath);
    }
}

function command(cmd, args, options) {
    if (args == null) args = [];
    if (options == null) options = {};
    if (options.cwd == null) options.cwd = process.cwd();

    if (process.platform == 'win32') {
        options.shell = cmd.endsWith('.exe') ? false : true;
        args = [].concat(args);
        for (let i = 0; i < args.length; i++) {
            args[i] = '"' + args[i].replace(/"/g, '""') + '"';
        }
    }

    console.log('\n> ' + cmd + ' ' + args.join(' '));

    return new Promise((resolve, reject) => {
        const child = spawn(cmd, args, {
            stdio: 'inherit',
            cwd: options.cwd,
            env: process.env,
            shell: options.shell
        });

        child.on('close', (code) => {
            if (code !== 0) {
                reject(new Error(`Child process exited with code ${code}`));
            } else {
                resolve(code);
            }
        });

        child.on('error', (error) => {
            reject(error);
        });
    });
}

async function buildShaderTools() {
    process.chdir(__dirname);

    // Setup paths for shader tools
    console.log("Setting up shader tools...");

    const gitRoot = path.join(__dirname, '..', 'git');
    const shadercPath = path.join(gitRoot, 'shaderc');
    const spirvCrossPath = path.join(gitRoot, 'SPIRV-Cross');

    // Ensure output directories exist
    const binPath = path.join(__dirname, '..', 'bin');
    if (!fs.existsSync(binPath)) {
        fs.mkdirSync(binPath, { recursive: true });
    }

    // Ensure the commit directory exists
    const commitPath = path.join(binPath, '.commit');
    if (!fs.existsSync(commitPath)) {
        fs.mkdirSync(commitPath, { recursive: true });
    }

    // Get current commits
    const shadercCommit = getGitCommit(shadercPath);
    const spirvCrossCommit = getGitCommit(spirvCrossPath);

    // Check if we need to rebuild
    let buildGlslc = forceRebuild || !fs.existsSync(path.join(binPath, process.platform === 'win32' ? 'glslc.exe' : 'glslc'));
    let buildSpirvCross = forceRebuild || !fs.existsSync(path.join(binPath, process.platform === 'win32' ? 'spirv-cross.exe' : 'spirv-cross'));

    // Check commits if binaries exist
    if (!buildGlslc && shadercCommit) {
        const commitFilePath = path.join(binPath, '.commit/glslc');
        if (fs.existsSync(commitFilePath)) {
            const storedCommit = fs.readFileSync(commitFilePath, 'utf8').trim();
            if (storedCommit !== shadercCommit) {
                console.log(`Shaderc commit changed (${storedCommit} -> ${shadercCommit})`);
                buildGlslc = true;
            } else {
                console.log(`Skipping glslc build - commit ${shadercCommit} matches existing binary`);
            }
        } else {
            buildGlslc = true;
        }
    }

    if (!buildSpirvCross && spirvCrossCommit) {
        const commitFilePath = path.join(binPath, '.commit/spirv-cross');
        if (fs.existsSync(commitFilePath)) {
            const storedCommit = fs.readFileSync(commitFilePath, 'utf8').trim();
            if (storedCommit !== spirvCrossCommit) {
                console.log(`SPIRV-Cross commit changed (${storedCommit} -> ${spirvCrossCommit})`);
                buildSpirvCross = true;
            } else {
                console.log(`Skipping spirv-cross build - commit ${spirvCrossCommit} matches existing binary`);
            }
        } else {
            buildSpirvCross = true;
        }
    }

    // Get shaderc dependencies if needed
    if (buildGlslc && !fs.existsSync(path.join(shadercPath, 'third_party', 'glslang'))) {
        console.log("Setting up shaderc dependencies...");
        if (process.platform == 'win32') {
            await command('python3', ['./utils/git-sync-deps'], { cwd: shadercPath });
        }
        else {
            await command('./utils/git-sync-deps', [], { cwd: shadercPath });
        }
    }

    if (process.platform == 'darwin') {
        if (buildGlslc) {
            console.log("Building glslc for macOS");

            // Build glslc for ARM64
            if (!fs.existsSync(path.join(shadercPath, 'build-arm64'))) {
                fs.mkdirSync(path.join(shadercPath, 'build-arm64'), { recursive: true });
            }

            await command('cmake', [
                '-DCMAKE_BUILD_TYPE=Release',
                '-DCMAKE_OSX_ARCHITECTURES=arm64',
                '..'
            ], { cwd: path.join(shadercPath, 'build-arm64') });

            await command('cmake', ['--build', '.', '--target', 'glslc_exe'],
                         { cwd: path.join(shadercPath, 'build-arm64') });

            // Build glslc for x86_64
            if (!fs.existsSync(path.join(shadercPath, 'build-x86_64'))) {
                fs.mkdirSync(path.join(shadercPath, 'build-x86_64'), { recursive: true });
            }

            await command('cmake', [
                '-DCMAKE_BUILD_TYPE=Release',
                '-DCMAKE_OSX_ARCHITECTURES=x86_64',
                '..'
            ], { cwd: path.join(shadercPath, 'build-x86_64') });

            await command('cmake', ['--build', '.', '--target', 'glslc_exe'],
                         { cwd: path.join(shadercPath, 'build-x86_64') });

            // Create universal binary for glslc
            await command('lipo', [
                '-create',
                path.join(shadercPath, 'build-arm64', 'glslc', 'glslc'),
                path.join(shadercPath, 'build-x86_64', 'glslc', 'glslc'),
                '-output', path.join(binPath, 'glslc')
            ]);

            // Make executable
            await command('chmod', ['+x', path.join(binPath, 'glslc')]);

            // Save commit info
            if (shadercCommit) {
                fs.writeFileSync(path.join(binPath, '.commit/glslc'), shadercCommit);
            }

            // Delete build folders
            deleteDirRecursive(path.join(shadercPath, 'build-arm64'));
            deleteDirRecursive(path.join(shadercPath, 'build-x86_64'));
        }

        if (buildSpirvCross) {
            console.log("Building spirv-cross for macOS");

            // Build spirv-cross for ARM64
            if (!fs.existsSync(path.join(spirvCrossPath, 'build-arm64'))) {
                fs.mkdirSync(path.join(spirvCrossPath, 'build-arm64'), { recursive: true });
            }

            await command('cmake', [
                '-DCMAKE_BUILD_TYPE=Release',
                '-DSPIRV_CROSS_CLI=ON',
                '-DSPIRV_CROSS_ENABLE_TESTS=OFF',
                '-DCMAKE_OSX_ARCHITECTURES=arm64',
                '..'
            ], { cwd: path.join(spirvCrossPath, 'build-arm64') });

            await command('make', ['-j4', 'spirv-cross'], { cwd: path.join(spirvCrossPath, 'build-arm64') });

            // Build spirv-cross for x86_64
            if (!fs.existsSync(path.join(spirvCrossPath, 'build-x86_64'))) {
                fs.mkdirSync(path.join(spirvCrossPath, 'build-x86_64'), { recursive: true });
            }

            await command('cmake', [
                '-DCMAKE_BUILD_TYPE=Release',
                '-DSPIRV_CROSS_CLI=ON',
                '-DSPIRV_CROSS_ENABLE_TESTS=OFF',
                '-DCMAKE_OSX_ARCHITECTURES=x86_64',
                '..'
            ], { cwd: path.join(spirvCrossPath, 'build-x86_64') });

            await command('make', ['-j4', 'spirv-cross'], { cwd: path.join(spirvCrossPath, 'build-x86_64') });

            // Create universal binary for spirv-cross
            await command('lipo', [
                '-create',
                path.join(spirvCrossPath, 'build-arm64', 'spirv-cross'),
                path.join(spirvCrossPath, 'build-x86_64', 'spirv-cross'),
                '-output', path.join(binPath, 'spirv-cross')
            ]);

            // Make executable
            await command('chmod', ['+x', path.join(binPath, 'spirv-cross')]);

            // Save commit info
            if (spirvCrossCommit) {
                fs.writeFileSync(path.join(binPath, '.commit/spirv-cross'), spirvCrossCommit);
            }

            // Delete build folders
            deleteDirRecursive(path.join(spirvCrossPath, 'build-arm64'));
            deleteDirRecursive(path.join(spirvCrossPath, 'build-x86_64'));
        }
    }
    else if (process.platform == 'win32') {
        if (buildGlslc) {
            console.log("Building glslc for Windows");

            // Build glslc
            if (!fs.existsSync(path.join(shadercPath, 'build'))) {
                fs.mkdirSync(path.join(shadercPath, 'build'), { recursive: true });
            }

            await command('cmake', [
                '-G', 'Visual Studio 17 2022',
                '-A', 'x64',
                '-DCMAKE_BUILD_TYPE=Release',
                '..'
            ], { cwd: path.join(shadercPath, 'build') });

            await command('cmake', ['--build', '.', '--config', 'Release', '--target', 'glslc_exe'],
                         { cwd: path.join(shadercPath, 'build') });

            // Copy glslc binary
            fs.copyFileSync(
                path.join(shadercPath, 'build', 'glslc', 'Release', 'glslc.exe'),
                path.join(binPath, 'glslc.exe')
            );

            // Save commit info
            if (shadercCommit) {
                fs.writeFileSync(path.join(binPath, '.commit/glslc'), shadercCommit);
            }

            // Delete build folder
            deleteDirRecursive(path.join(shadercPath, 'build'));
        }

        if (buildSpirvCross) {
            console.log("Building spirv-cross for Windows");

            // Build spirv-cross
            if (!fs.existsSync(path.join(spirvCrossPath, 'build'))) {
                fs.mkdirSync(path.join(spirvCrossPath, 'build'), { recursive: true });
            }

            await command('cmake', [
                '-G', 'Visual Studio 17 2022',
                '-A', 'x64',
                '-DCMAKE_BUILD_TYPE=Release',
                '-DSPIRV_CROSS_CLI=ON',
                '-DSPIRV_CROSS_ENABLE_TESTS=OFF',
                '..'
            ], { cwd: path.join(spirvCrossPath, 'build') });

            await command('cmake', ['--build', '.', '--config', 'Release', '--target', 'spirv-cross'],
                         { cwd: path.join(spirvCrossPath, 'build') });

            // Copy spirv-cross binary
            fs.copyFileSync(
                path.join(spirvCrossPath, 'build', 'Release', 'spirv-cross.exe'),
                path.join(binPath, 'spirv-cross.exe')
            );

            // Save commit info
            if (spirvCrossCommit) {
                fs.writeFileSync(path.join(binPath, '.commit/spirv-cross'), spirvCrossCommit);
            }

            // Delete build folder
            deleteDirRecursive(path.join(spirvCrossPath, 'build'));
        }
    }
    else {
        if (buildGlslc) {
            console.log("Building glslc for Linux");

            // Build glslc
            if (!fs.existsSync(path.join(shadercPath, 'build'))) {
                fs.mkdirSync(path.join(shadercPath, 'build'), { recursive: true });
            }

            // Check if we're on ARM64 or x86_64
            const isArm64 = isLinuxArm64();

            await command('cmake', [
                '-DCMAKE_BUILD_TYPE=Release',
                '..'
            ], { cwd: path.join(shadercPath, 'build') });

            await command('cmake', ['--build', '.', '--target', 'glslc_exe'],
                         { cwd: path.join(shadercPath, 'build') });

            // Copy glslc binary
            fs.copyFileSync(
                path.join(shadercPath, 'build', 'glslc', 'glslc'),
                path.join(binPath, 'glslc')
            );

            // Make executable
            await command('chmod', ['+x', path.join(binPath, 'glslc')]);

            // Save commit info
            if (shadercCommit) {
                fs.writeFileSync(path.join(binPath, '.commit/glslc'), shadercCommit);
            }

            // Delete build folder
            deleteDirRecursive(path.join(shadercPath, 'build'));
        }

        if (buildSpirvCross) {
            console.log("Building spirv-cross for Linux");

            // Build spirv-cross
            if (!fs.existsSync(path.join(spirvCrossPath, 'build'))) {
                fs.mkdirSync(path.join(spirvCrossPath, 'build'), { recursive: true });
            }

            await command('cmake', [
                '-DCMAKE_BUILD_TYPE=Release',
                '-DSPIRV_CROSS_CLI=ON',
                '-DSPIRV_CROSS_ENABLE_TESTS=OFF',
                '..'
            ], { cwd: path.join(spirvCrossPath, 'build') });

            await command('make', ['-j4', 'spirv-cross'], { cwd: path.join(spirvCrossPath, 'build') });

            // Copy spirv-cross binary
            fs.copyFileSync(
                path.join(spirvCrossPath, 'build', 'spirv-cross'),
                path.join(binPath, 'spirv-cross')
            );

            // Make executable
            await command('chmod', ['+x', path.join(binPath, 'spirv-cross')]);

            // Save commit info
            if (spirvCrossCommit) {
                fs.writeFileSync(path.join(binPath, '.commit/spirv-cross'), spirvCrossCommit);
            }

            // Delete build folder
            deleteDirRecursive(path.join(spirvCrossPath, 'build'));
        }
    }
}

(async () => {
    try {
        await buildShaderTools();
        console.log("Shader tools build completed successfully!");
    } catch (error) {
        console.error("Error building shader tools:", error);
        process.exit(1);
    }
})();